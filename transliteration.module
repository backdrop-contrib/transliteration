<?php
// $Id$

/**
 * @file
 * Provides transliteration for UTF-8 text input and sanitzes file names.
 *
 * Uses data from the Text::Unidecode Perl library.
 * @see http://search.cpan.org/~sburke/Text-Unidecode-0.04/lib/Text/Unidecode.pm
 */

/**
 * Transliterate UTF-8 text to ASCII.
 *
 * Takes an input string in any language and character set, and tries to
 * represent it in ASCII characters by conveying, in Roman letters, the
 * pronunciation expressed by the text in some other writing system.
 *
 * @param $input
 *   UTF-8 text input.
 * @param $unknown
 *   Replacement string for characters that do not have a suitable ASCII
 *   equivalent.
 * @param $langcode
 *   Optional ISO 639 language code that denotes the language of the input.
 *   Used to apply language-specific optimizations.  Defaults to the current
 *   display language.
 * @return
 *   Transliterated text.
 */
function transliteration_get($input, $unknown = '?', $langcode = NULL) {
  module_load_include('inc', 'transliteration');
  return transliteration_process($input, $unknown, $langcode);
}

/**
 * Implementation of hook_init().
 *
 * Transliterate and clean the names of files currently being uploaded.
 */
function transliteration_init() {
  if (!empty($_FILES['files'])) {
    module_load_include('inc', 'transliteration');

    // Figure out language, which is available for node form submits.
    $langcode = NULL;
    if (!empty($_POST['language'])) {
      $languages = language_list();
      if (isset($languages[$_POST['language']])) {
        $langcode = $_POST['language'];
      }
    }
    foreach ($_FILES['files']['name'] as $field => $filename) {
      // Keep a copy of the unaltered file name.
      $_FILES['files']['orig_name'][$field] = $filename;
      $_FILES['files']['name'][$field] = transliteration_clean_filename($filename, $langcode);
    }
  }
}

